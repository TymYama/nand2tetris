// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static boolean curColor;
    static int whiteP;
    static int blackP;
    static boolean white;
    static boolean black;
    
    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let white = false;
        let black = true;
        let whiteP = 0;
        let blackP = 1;
        let curColor = black;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while(i < 8192){
            let screen[i] = white;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let curColor = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int mask;

        let address = (y*32) + (x/16);
        let mask = Math.twoPowers(x & 15);

        if(curColor) {
            let screen[address] = screen[address] | mask;
        }
        else {
            let screen[address] = screen[address] & ~mask;
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        var int temp;
        if(x1 > x2){
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        let dx = x2 - x1;
        let dy = y2 - y1;
        if(dx = 0){
            do Screen.drawVLine(x1, y1, y2);
        }
        else{ if(dy = 0){
            do Screen.drawHLine(x1, x2, y1);
        }
        else{
            do Screen.drawDiagonalLine(x1, y1, x2, y2, dx, dy);
        }}
        
        return;
    }
    
    function void drawDiagonalLine(int x1, int y1, int x2, int y2, int dx, int dy) {
        var int a, b;
        var int adyMinusbdx;
        var int y_incr;
        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;
        if(dy < 0){
            let y_incr = -1;
        }
        else{
            let y_incr = 1;
        }
        while(~(a > dx) & (((y_incr = 1) & ~(b > dy)) | ((y_incr = -1) & ~(b < dy)))){
            do Screen.drawPixel(x1+a, y1+b);
            if(adyMinusbdx < 0){
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + (dy*y_incr);
            }
            else{
                let b = b + y_incr;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }
        return;
    }

    function void drawVLine(int x, int y1, int y2) {
        var int temp;
        // Make sure y1 <= y2
        if(y1 > y2){
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        while(~(y1 > y2)){
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }
        return;
    }
    
    function void drawHLine(int x1, int x2, int y) {
        var int start_addr, end_addr;
        var int x1mod16, x2mod16;
        let x1mod16 = x1 & 15;
        let x2mod16 = x2 & 15;
        let start_addr = (y*32) + (x1/16);
        let end_addr = (y*32) + (x2/16) + (x2mod16=0);
        if(start_addr = end_addr){
            do Screen.drawShortHLine(x1, x2, y);
        }
        else{ 
            if(~(x1mod16 = 0)){      
                let start_addr = start_addr + 1;
                do Screen.drawShortHLine(x1, x1+16-x1mod16, y);
            }
            if(~(x2mod16 = 0)){
                let end_addr = end_addr - 1;
                do Screen.drawShortHLine(x2-x2mod16, x2, y);
            }
            while(~(start_addr > end_addr)){
                let screen[start_addr] = curColor;
                let start_addr = start_addr + 1;
            }
        }
        return;
    }
    
    function void drawShortHLine(int x1, int x2, int y){
        while(~(x1 > x2)) {
            do Screen.drawPixel(x1, y);
            let x1 = x1 + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        let y = y1;
        while(~(y > y2)){
            do Screen.drawHLine(x1, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int cx, int cy, int r) {
        var int dx, dy;
        var int rSqrd;
        let dy = -r;
        let rSqrd = r*r;
        while(~(dy > r)){
            let dx = Math.sqrt(rSqrd-(dy*dy));
            do Screen.drawHLine( cx-dx, cx+dx, cy+dy );
            let dy = dy + 1;
        }
        return;
    }
}