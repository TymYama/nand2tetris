// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {
    static int twoPowers;
    
    /** Initializes the library. */
    function void init() {
        let twoPowers = Array.new(16);
        let twoPowers[0] = 1;
        let twoPowers[1] = 2;
        let twoPowers[2] = 4;
        let twoPowers[3] = 8;
        let twoPowers[4] = 16;
        let twoPowers[5] = 32;
        let twoPowers[6] = 64;
        let twoPowers[7] = 128;
        let twoPowers[8] = 256;
        let twoPowers[9] = 512;
        let twoPowers[10] = 1024;
        let twoPowers[11] = 2048;
        let twoPowers[12] = 4096;
        let twoPowers[13] = 8192;
        let twoPowers[14] = 16384;
        let twoPowers[15] = 16384+16384;
        return;
    }

    function boolean bit(int x, int n) {
        return ~((x & twoPowers[n]) = 0);
    }
    
    function int twoPowers(int power) {
        return twoPowers[power];
    }
    
    /** Returns the absolute value of x. */
    function int abs(int x) {
        if( x < 0 ) {
            let x = -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX;
        var int j;
        
        let sum = 0;
        let shiftedX = x;
        let j = 0;
        while(j < 16){ 
            if(Math.bit(y, j)){
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }
        return sum;
    }
    
    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int negX, negY;
        var int q;
        var int result;
        
        let negX = x < 0;
        let negY = y < 0;
        let x = Math.abs(x);
        let y = Math.abs(y);

        if(y > x){
            return 0;
        }
        if (y < 16384){
           let q = Math.divide(x, y+y);
        }else{
           let q = 0; 
		}
        if(x-(2*q*y) < y){
            let result = q+q;
        }else{
            let result = q+q+1;
        }
        
        if(negX = negY){
            return result;
        }
        else{
            return -result;
        }
    }
    
    /** Returns the remainder part of x/y */
    function int mod(int x, int y) {
        var int q;
        let q = Math.divide(x, y);
        return x - (q*y);
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j, y;
        var int approx;
        var int approx_squared;
        let y = 0;
        let j = 7;   
        while(~(j < 0)){
            let approx = y + twoPowers[j];
            let approx_squared = approx * approx;
            if(~(approx_squared > x) & (approx_squared > 0)){
                let y = approx;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a > b){
            return a;
        }
        else{
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a < b){
            return a;
        }
        else{
            return b;
        }
    }
}